/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas.usuario;

import Ventanas.admin.*;
import Externos.CambiarPanel;
import ModeloTabla.*;
import Objetos.CamisaPlayera;
import Objetos.Carrito;
import Objetos.ObAn;
import Objetos.Ventas;
import Vista.Plantilla;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.border.BevelBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author PC
 */
public class PanelCarrito extends javax.swing.JPanel {

    /**
     * Creates new form AdminTec
     */
    int filas;

    JScrollPane scrollPaneTabla;
    int acumuladorTotal = 0;
    JTable tablaVentas;
    ArrayList<Carrito> listaCarrito;//lista que simula la informaci√≥n de la BD

    public ModeloTabla modelo;//modelo definido en la clase ModeloTabla
    //DefaultTableModel modelo2;
    private int filasTabla;
    private int columnasTabla;

    public PanelCarrito() {
        initComponents();
        /*
        modelo2 = new DefaultTableModel();
        modelo2.addColumn("Carrera");
        modelo2.addColumn("Camisas manga corta");
        modelo2.addColumn("Camisas manga larga");
        modelo2.addColumn("Playeras");
        
        jTable1.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 18));
        jTable1.getTableHeader().setOpaque(false);
        jTable1.getTableHeader().setBackground(new Color(213,213,213));
        jTable1.getTableHeader().setForeground(new Color(255,255,255));
    
        jTable1.setRowHeight(45);
         */
        iniciarComponentes();
        construirTabla();

        
        
        
        //No sirve la perra puta mediocre chingada valepapuramadre culera indulgente linea siguiente
        
        tablaVentas.getTableHeader().setFont(new Font("Rammetto", Font.BOLD, 80));

        //Cambiarel alto de las celdas
        //tablaPersonas.setRowHeight(41);
        //jTable1.setModel(modelo2);
        //mostrarStock();
    }

    public void limpiarTabla() {
        for (int i = 0; i < tablaVentas.getRowCount(); i++) {
            modelo.removeRow(i);
            i -= 1;
        }
    }

    public void mostrarCarrito() {
        Object datos[] = new Object[10];
        listaCarrito = ObAn.user.carrito;
        for (int i = 0; i < listaCarrito.size(); i++) {
            try {
                byte[] bi = listaCarrito.get(i).getFoto();
                //Testeando
                System.out.println(listaCarrito.get(i).getFoto());
                BufferedImage image = null;
                InputStream in = new ByteArrayInputStream(bi);
                image = ImageIO.read(in);
                ImageIcon imgi = new ImageIcon(image.getScaledInstance(200, 200, 0));
                JLabel imagen1 = new JLabel(imgi);
                datos[0] = imagen1;
                System.out.println("Si entro aqui");
                System.out.println(datos[0]);
            } catch (Exception ex) {
                System.out.println("Valio brga compadre");
                datos[0] = new JLabel("No imagen");
            }

            datos[1] = String.valueOf(listaCarrito.get(i).getDescripcion());
            datos[2] = listaCarrito.get(i).getUnidades() + "";
            datos[3] = listaCarrito.get(i).getPrecio() + "";
            datos[4] = listaCarrito.get(i).getPrecioVenta() + "";
            datos[5] = new JLabel(new ImageIcon("src/Imagenes/eliminar.png"));
            modelo.addRow(datos);
            acumuladorTotal += listaCarrito.get(i).getPrecioVenta();
            //modelo2.addRow(datos);
        }
        txtFieldTotal.setText(String.valueOf(acumuladorTotal));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtFieldTotal = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtFieldTotal.setEditable(false);
        txtFieldTotal.setBackground(new java.awt.Color(196, 196, 196));
        txtFieldTotal.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        txtFieldTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtFieldTotal.setBorder(null);
        add(txtFieldTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 662, 120, 40));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Regresar-1.png"))); // NOI18N
        jButton2.setBorder(null);
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Regresar-2.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 4, 84, 85));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/RealizarCompra-1.png"))); // NOI18N
        jButton3.setBorder(null);
        jButton3.setContentAreaFilled(false);
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/RealizarCompra-2.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 650, 260, 60));

        jButton1.setBorder(null);
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 650, 230, 50));

        jPanel1.setLayout(new java.awt.BorderLayout());
        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 133, 1235, 470));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/CarritoCompras0.png"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        /*
        String[] info = new String[4];

        for (int i = 0; i < listaVentas.size(); i++) {

            info[0] = (String) modelo.getValueAt(i, 0);
            info[1] = (String) modelo.getValueAt(i, 1);
            info[2] = (String) modelo.getValueAt(i, 2);
            info[3] = (String) modelo.getValueAt(i, 3);
            new SQL.Conexion().actualizarStock("TECNOLOGICO", Integer.parseInt(info[1]), Integer.parseInt(info[2]), Integer.parseInt(info[3]), i + 1);
        }
        /*
        for (int i = 1; i < tablaPersonas.getColumnCount(); i++) {
            modelo.setValueAt(info[0], filas, 0);
            modelo.setValueAt(info[i], filas, i);
            
            //modelo2.setValueAt(info[0], filas, 0);
            //modelo2.setValueAt(info[i], filas, i);
        }
         */
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (listaCarrito.size() == 0) {
            //JOptionPane.showMessageDialog(null, "No se puede realizar una compra vacia qlero.");
            ObAn.popUpErrorPanel.jLabel1.setIcon(new ImageIcon("src/Imagenes/CompraVacia.png"));
                ObAn.popUpErrorPlantilla.setVisible(true);
        } else {

            if (new SQL.Conexion().verificarExistenciaTarjeta(ObAn.usuario.getIdUsuario())) {
                ObAn.seleccionarMetodoPago.botonVerMetodoPago.setVisible(true);
            }
            
            new CambiarPanel(ObAn.vd2.jPanel1, ObAn.seleccionarMetodoPago);
            ObAn.vd2.setVisible(true);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
       new CambiarPanel(Plantilla.jPanel1, ObAn.user);
        limpiarTabla();
    }//GEN-LAST:event_jButton2ActionPerformed

    /*
    private void tablaPersonasMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        int seleccion = tablaPersonas.getSelectedRow();
        txtFieldCamisaML.setText(jTable1.getValueAt(seleccion, 1).toString());
        txtFieldCamisaMC.setText(jTable1.getValueAt(seleccion, 2).toString());
        txtFieldPlayera.setText(jTable1.getValueAt(seleccion, 3).toString());

    }*/
    private void iniciarComponentes() {

        scrollPaneTabla = new JScrollPane();
        jPanel1.add(scrollPaneTabla);

        tablaVentas = new JTable();
        tablaVentas.setBackground(new Color(255, 255, 255));
        tablaVentas.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
        //tablaPersonas.addMouseListener(this);
        tablaVentas.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                //capturo fila o columna dependiendo de mi necesidad
                int fila = tablaVentas.rowAtPoint(e.getPoint());
                int columna = tablaVentas.columnAtPoint(e.getPoint());

//uso la columna para valiar si corresponde a la columna de perfil garantizando
// que solo se produzca algo si selecciono una fila de esa columna
//
                if (columna == Utilidades.eliminar) {
                    //sabiendo que corresponde a la columna de perfil, envio la posicion de la fila seleccionada
                    validarSeleccionMouse(fila, columna);
                } 

            }
        });
        //tablaSeguimiento.addKeyListener(this);
        tablaVentas.setOpaque(false);
        scrollPaneTabla.setViewportView(tablaVentas);
    }

//
//Metodo que permite construir la tabla de personas
//se crean primero las columnas y luego se asigna la informaci√≥n
//
    private void construirTabla() {

        listaCarrito = ObAn.user.carrito;
        ArrayList titulosList = new ArrayList<>();

        titulosList.add("Imagen");
        titulosList.add("Descripcion del producto");
        titulosList.add("Cantidad");
        titulosList.add("Precio unitario");
        titulosList.add("Precio total");
        titulosList.add("Eliminar");

        //se asignan las columnas al arreglo para enviarse al momento de construir la tabla
        String titulos[] = new String[titulosList.size()];
        for (int i = 0; i < titulos.length; i++) {
            titulos[i] = (String) titulosList.get(i);
        }
//obtenemos los datos de la lista y los guardamos en la matriz
//que luego se manda a construir la tabla

        Object[][] data = obtenerMatrizDatos(titulosList);
        construirTabla(titulos, data);

    }

//
//Permite simular el llenado de personas en una lista
//que posteriormente alimentar√° la tabla
//@return
//
//
// Llena la informaci√≥n de la tabla usando la lista de personas trabajada 
// anteriormente, guardandola en una matriz que se retorna con toda 
// la informaci√≥n para luego ser asignada al modelo
// @param titulosList
// @return
//
    private Object[][] obtenerMatrizDatos(ArrayList titulosList) {

//se crea la matriz donde las filas son dinamicas pues corresponde
//a todos los usuarios, mientras que las columnas son estaticas
// correspondiendo a las columnas definidas por defecto
//
        Object informacion[][] = new Object[listaCarrito.size()][titulosList.size()];

        for (int x = 0; x < informacion.length; x++) {
            try {
                byte[] bi = listaCarrito.get(x).getFoto();
                BufferedImage image = null;
                InputStream in = new ByteArrayInputStream(bi);
                image = ImageIO.read(in);
                ImageIcon imgi = new ImageIcon(image.getScaledInstance(200, 200, 0));
                JLabel imagen = new JLabel(imgi);

                informacion[x][Utilidades.imagen] = imagen;

            } catch (Exception ex) {
                informacion[x][Utilidades.imagen] = new JLabel("No imagen");
            }

            informacion[x][Utilidades.descripcionProducto] = listaCarrito.get(x).getDescripcion() + "";
            informacion[x][Utilidades.cantidad] = listaCarrito.get(x).getUnidades() + "";
            informacion[x][Utilidades.precioUnitario] = listaCarrito.get(x).getPrecio() + "";
            informacion[x][Utilidades.precioTotal] = listaCarrito.get(x).getPrecioVenta() + "";
            informacion[x][Utilidades.eliminar] = "Eliminar";
        }

        return informacion;
    }

//
// Con los titulos y la informaci√≥n a mostrar se crea el modelo para 
// poder personalizar la tabla, asignando tama√±o de celdas tanto en ancho como en alto
// as√≠ como los tipos de datos que va a poder soportar.
// @param titulos
// @param data
//
    private void construirTabla(String[] titulos, Object[][] data) {
        //modelo = new ModeloTabla(data, titulos);
        //se asigna el modelo a la tabla
        modelo = new ModeloTabla(data, titulos) {
            @Override
            public boolean isCellEditable(int row, int column) {
                //Si la columna es diferente de 
                if (column != Utilidades.cantidad ) {
                    return false;
                } else {
                    return true;
                }
            }
        };
        tablaVentas.setModel(modelo);

        filasTabla = tablaVentas.getRowCount();
        columnasTabla = tablaVentas.getColumnCount();

        //se asigna el tipo de dato que tendr√°n las celdas de cada columna definida respectivamente para validar su personalizaci√≥n
        tablaVentas.getColumnModel().getColumn(Utilidades.imagen).setCellRenderer(new GestionCeldas());
        tablaVentas.getColumnModel().getColumn(Utilidades.descripcionProducto).setCellRenderer(new GestionCeldas("texto"));
        tablaVentas.getColumnModel().getColumn(Utilidades.cantidad).setCellRenderer(new GestionCeldas("numerico"));
        tablaVentas.getColumnModel().getColumn(Utilidades.precioUnitario).setCellRenderer(new GestionCeldas("numerico"));
        tablaVentas.getColumnModel().getColumn(Utilidades.precioTotal).setCellRenderer(new GestionCeldas("numerico"));
        tablaVentas.getColumnModel().getColumn(Utilidades.eliminar).setCellRenderer(new GestionCeldas("icono"));

        tablaVentas.getTableHeader().setReorderingAllowed(false);
        tablaVentas.setRowHeight(160);//tama√±o de las celdas
        tablaVentas.setGridColor(new java.awt.Color(238, 238, 238));
        //Se define el tama√±o de largo para cada columna y su contenido
        tablaVentas.getColumnModel().getColumn(Utilidades.imagen).setPreferredWidth(60);//documento
        tablaVentas.getColumnModel().getColumn(Utilidades.descripcionProducto).setPreferredWidth(250);//nombre
        tablaVentas.getColumnModel().getColumn(Utilidades.cantidad).setPreferredWidth(20);//direccion
        tablaVentas.getColumnModel().getColumn(Utilidades.precioUnitario).setPreferredWidth(20);//telefono
        tablaVentas.getColumnModel().getColumn(Utilidades.precioTotal).setPreferredWidth(20);//telefono
        tablaVentas.getColumnModel().getColumn(Utilidades.eliminar).setPreferredWidth(20);//telefono

        //personaliza el encabezado
        JTableHeader jtableHeader = tablaVentas.getTableHeader();
        jtableHeader.setDefaultRenderer(new EncabezadoTabla());
        tablaVentas.setTableHeader(jtableHeader);

        //se asigna la tabla al scrollPane
        scrollPaneTabla.setViewportView(tablaVentas);

    }

    //
// Este metodo simularia el proceso o la acci√≥n que se quiere realizar si 
// se presiona alguno de los botones o iconos de la tabla
// @param fila
//
    private void validarSeleccionMouse(int fila, int columna) {
        Utilidades.filaSeleccionada = fila;
        modelo.removeRow(fila);
        ObAn.user.carrito.remove(fila);
        //meramente comprobacion
        for (int i = 0; i < ObAn.user.carrito.size(); i++) {
            System.out.println(ObAn.user.carrito.get(i).getDescripcion());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtFieldTotal;
    // End of variables declaration//GEN-END:variables
}
