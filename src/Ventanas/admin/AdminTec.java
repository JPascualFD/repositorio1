  /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventanas.admin;

import Externos.CambiarPanel;
import ModeloTabla.*;
import Objetos.CamisaPlayera;
import Objetos.ObAn;
import Vista.Plantilla;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.border.BevelBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author PC
 */
public class AdminTec extends javax.swing.JPanel {

    /**
     * Creates new form AdminTec
     */
    int filas;

    JScrollPane scrollPaneTabla;
    JTable tablaPersonas;
    ArrayList<CamisaPlayera> listaCamisaPlayera;//lista que simula la información de la BD

    ModeloTabla modelo;//modelo definido en la clase ModeloTabla
    //DefaultTableModel modelo2;
    private int filasTabla;
    private int columnasTabla;

    public AdminTec() {
        initComponents();
        /*
        modelo2 = new DefaultTableModel();
        modelo2.addColumn("Carrera");
        modelo2.addColumn("Camisas manga corta");
        modelo2.addColumn("Camisas manga larga");
        modelo2.addColumn("Playeras");
        
        jTable1.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 18));
        jTable1.getTableHeader().setOpaque(false);
        jTable1.getTableHeader().setBackground(new Color(213,213,213));
        jTable1.getTableHeader().setForeground(new Color(255,255,255));
    
        jTable1.setRowHeight(45);
         */
        
        //Lo siguiente no estaba comentado
        //iniciarComponentes();
        //construirTabla();
        //No sirve la perra puta mediocre chingada valepapuramadre culera indulgente linea siguiente
        //tablaPersonas.getTableHeader().setFont( new Font("Rammetto", Font.BOLD, 80));
        //limpiarTabla();
        
        
        //Cambiarel alto de las celdas
        //tablaPersonas.setRowHeight(41);
        
        

        //jTable1.setModel(modelo2);
        //mostrarStock();
    }

    private void limpiarTabla() {
        for (int i = 0; i < tablaPersonas.getRowCount(); i++) {
            modelo.removeRow(i);
            i -= 1;
        }
    }

    public void mostrarStock() {
        String datos[] = new String[10];
        // listaCamisaPlayera = new SQL.Conexion().obtenerStock("TECNOLOGICO");
        for (int i = 0; i < listaCamisaPlayera.size(); i++) {

            datos[0] = listaCamisaPlayera.get(i).getCarrera();
            datos[1] = String.valueOf(listaCamisaPlayera.get(i).getCamisaMC());
            datos[2] = String.valueOf(listaCamisaPlayera.get(i).getCamisaML());
            datos[3] = String.valueOf(listaCamisaPlayera.get(i).getPlayera());
            modelo.addRow(datos);
            //modelo2.addRow(datos);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setBorder(null);
        jButton2.setContentAreaFilled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 50, 60));

        jButton1.setBorder(null);
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 650, 230, 50));

        jPanel1.setLayout(new java.awt.BorderLayout());
        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 1230, 473));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Admin 3.png"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        String[] info = new String[4];

        for (int i = 0; i < listaCamisaPlayera.size(); i++) {

            info[0] = (String) modelo.getValueAt(i, 0);
            info[1] = (String) modelo.getValueAt(i, 1);
            info[2] = (String) modelo.getValueAt(i, 2);
            info[3] = (String) modelo.getValueAt(i, 3);
            //new SQL.Conexion().actualizarStock("TECNOLOGICO", Integer.parseInt(info[1]), Integer.parseInt(info[2]), Integer.parseInt(info[3]), i + 1);
        }
        /*
        for (int i = 1; i < tablaPersonas.getColumnCount(); i++) {
            modelo.setValueAt(info[0], filas, 0);
            modelo.setValueAt(info[i], filas, i);
            
            //modelo2.setValueAt(info[0], filas, 0);
            //modelo2.setValueAt(info[i], filas, i);
        }
         */
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        new CambiarPanel(Plantilla.jPanel1, ObAn.admin2);
        limpiarTabla();

    }//GEN-LAST:event_jButton2ActionPerformed
    
    /*
    private void tablaPersonasMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        int seleccion = tablaPersonas.getSelectedRow();
        txtFieldCamisaML.setText(jTable1.getValueAt(seleccion, 1).toString());
        txtFieldCamisaMC.setText(jTable1.getValueAt(seleccion, 2).toString());
        txtFieldPlayera.setText(jTable1.getValueAt(seleccion, 3).toString());

    }*/

    private void iniciarComponentes() {

        scrollPaneTabla = new JScrollPane();
        jPanel1.add(scrollPaneTabla);

        tablaPersonas = new JTable();
        tablaPersonas.setBackground(Color.WHITE);
        tablaPersonas.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
        //tablaPersonas.addMouseListener(this);
        //tablaSeguimiento.addKeyListener(this);
        tablaPersonas.setOpaque(false);
        scrollPaneTabla.setViewportView(tablaPersonas);
    }

//
//Metodo que permite construir la tabla de personas
//se crean primero las columnas y luego se asigna la información
//
    private void construirTabla() {

       // listaCamisaPlayera = new SQL.Conexion().obtenerStock("TECNOLOGICO");
        ArrayList titulosList = new ArrayList<>();

        titulosList.add("Carrera");
        titulosList.add("Camisa manga larga");
        titulosList.add("Camisa manga corta");
        titulosList.add("Playera");

        //se asignan las columnas al arreglo para enviarse al momento de construir la tabla
        String titulos[] = new String[titulosList.size()];
        for (int i = 0; i < titulos.length; i++) {
            titulos[i] = (String) titulosList.get(i);
        }
//obtenemos los datos de la lista y los guardamos en la matriz
//que luego se manda a construir la tabla

        Object[][] data = obtenerMatrizDatos(titulosList);
        construirTabla(titulos, data);

    }

//
//Permite simular el llenado de personas en una lista
//que posteriormente alimentará la tabla
//@return
//
//
// Llena la información de la tabla usando la lista de personas trabajada 
// anteriormente, guardandola en una matriz que se retorna con toda 
// la información para luego ser asignada al modelo
// @param titulosList
// @return
//
    private Object[][] obtenerMatrizDatos(ArrayList titulosList) {

//se crea la matriz donde las filas son dinamicas pues corresponde
//a todos los usuarios, mientras que las columnas son estaticas
// correspondiendo a las columnas definidas por defecto
//
        String informacion[][] = new String[listaCamisaPlayera.size()][titulosList.size()];

        for (int x = 0; x < informacion.length; x++) {

            informacion[x][Utilidades.carrera] = listaCamisaPlayera.get(x).getCarrera() + "";
            informacion[x][Utilidades.cantidadMangaC] = listaCamisaPlayera.get(x).getCamisaMC() + "";
            informacion[x][Utilidades.cantidadMangaL] = listaCamisaPlayera.get(x).getCamisaML() + "";
            informacion[x][Utilidades.playeras] = listaCamisaPlayera.get(x).getPlayera() + "";

        }

        return informacion;
    }

//
// Con los titulos y la información a mostrar se crea el modelo para 
// poder personalizar la tabla, asignando tamaño de celdas tanto en ancho como en alto
// así como los tipos de datos que va a poder soportar.
// @param titulos
// @param data
//
    private void construirTabla(String[] titulos, Object[][] data) {
        modelo = new ModeloTabla(data, titulos);
        //se asigna el modelo a la tabla
       
        tablaPersonas.setModel(modelo);
        
        
            
        filasTabla = tablaPersonas.getRowCount();
        columnasTabla = tablaPersonas.getColumnCount();

        //se asigna el tipo de dato que tendrán las celdas de cada columna definida respectivamente para validar su personalización
        tablaPersonas.getColumnModel().getColumn(Utilidades.carrera).setCellRenderer(new GestionCeldas("texto"));
        tablaPersonas.getColumnModel().getColumn(Utilidades.cantidadMangaC).setCellRenderer(new GestionCeldas("numerico"));
        tablaPersonas.getColumnModel().getColumn(Utilidades.cantidadMangaL).setCellRenderer(new GestionCeldas("numerico"));
        tablaPersonas.getColumnModel().getColumn(Utilidades.playeras).setCellRenderer(new GestionCeldas("numerico"));

        tablaPersonas.getTableHeader().setReorderingAllowed(false);
        tablaPersonas.setRowHeight(41);//tamaño de las celdas
        tablaPersonas.setGridColor(new java.awt.Color(255, 255, 255));
        //Se define el tamaño de largo para cada columna y su contenido
        tablaPersonas.getColumnModel().getColumn(Utilidades.carrera).setPreferredWidth(400);//documento
        tablaPersonas.getColumnModel().getColumn(Utilidades.cantidadMangaC).setPreferredWidth(100);//nombre
        tablaPersonas.getColumnModel().getColumn(Utilidades.cantidadMangaL).setPreferredWidth(100);//direccion
        tablaPersonas.getColumnModel().getColumn(Utilidades.playeras).setPreferredWidth(100);//telefono

        //personaliza el encabezado
        JTableHeader jtableHeader = tablaPersonas.getTableHeader();
        jtableHeader.setDefaultRenderer(new EncabezadoTabla());
        tablaPersonas.setTableHeader(jtableHeader);

        //se asigna la tabla al scrollPane
        scrollPaneTabla.setViewportView(tablaPersonas);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
